#!/usr/bin/env python3
"""
Skript pro vyƒçi≈°tƒõn√≠ Python cache a __pycache__ slo≈æek
≈òe≈°√≠ probl√©my s p≈ôejmenov√°n√≠m modul≈Ø
"""

import os
import shutil
import sys

def find_and_remove_pycache(directory="."):
    """Najde a sma≈æe v≈°echny __pycache__ slo≈æky"""
    removed_count = 0
    
    for root, dirs, files in os.walk(directory):
        # Naj√≠t __pycache__ slo≈æky
        if "__pycache__" in dirs:
            pycache_path = os.path.join(root, "__pycache__")
            try:
                shutil.rmtree(pycache_path)
                print(f"‚úÖ Smaz√°na cache: {pycache_path}")
                removed_count += 1
            except Exception as e:
                print(f"‚ùå Chyba p≈ôi maz√°n√≠ {pycache_path}: {e}")
        
        # Naj√≠t .pyc soubory
        for file in files:
            if file.endswith('.pyc'):
                pyc_path = os.path.join(root, file)
                try:
                    os.remove(pyc_path)
                    print(f"‚úÖ Smaz√°n .pyc soubor: {pyc_path}")
                    removed_count += 1
                except Exception as e:
                    print(f"‚ùå Chyba p≈ôi maz√°n√≠ {pyc_path}: {e}")
    
    return removed_count

def clear_import_cache():
    """Vyƒçist√≠ Python import cache v pamƒõti"""
    # Smaz√°n√≠ modul≈Ø z sys.modules kter√© zaƒç√≠naj√≠ na game_object nebo game_objects
    modules_to_remove = []
    
    for module_name in sys.modules.keys():
        if (module_name.startswith('game_object') or 
            module_name.startswith('ui') or 
            module_name.startswith('utils')):
            modules_to_remove.append(module_name)
    
    for module_name in modules_to_remove:
        try:
            del sys.modules[module_name]
            print(f"‚úÖ Smaz√°n z pamƒõti: {module_name}")
        except KeyError:
            pass
    
    return len(modules_to_remove)

def check_directory_structure():
    """Zkontroluje aktu√°ln√≠ strukturu adres√°≈ô≈Ø"""
    print("\nüìÅ Aktu√°ln√≠ struktura:")
    
    expected_dirs = ['game_objects', 'ui', 'utils']
    old_dirs = ['game_object']  # P≈Øvodn√≠ n√°zev
    
    for dir_name in expected_dirs:
        if os.path.exists(dir_name):
            print(f"‚úÖ {dir_name}/ - EXISTUJE")
            init_file = os.path.join(dir_name, '__init__.py')
            if os.path.exists(init_file):
                print(f"  ‚úÖ {dir_name}/__init__.py - EXISTUJE")
            else:
                print(f"  ‚ùå {dir_name}/__init__.py - CHYB√ç")
        else:
            print(f"‚ùå {dir_name}/ - NEEXISTUJE")
    
    # Kontrola star√Ωch n√°zv≈Ø
    for old_dir in old_dirs:
        if os.path.exists(old_dir):
            print(f"‚ö†Ô∏è  {old_dir}/ - STAR√ù N√ÅZEV ST√ÅLE EXISTUJE! Sma≈æte ho.")

def main():
    print("üßπ ƒåi≈°tƒõn√≠ Python cache...")
    print(f"üìç Pracovn√≠ adres√°≈ô: {os.getcwd()}")
    
    # 1. Vyƒçi≈°tƒõn√≠ souborov√© cache
    print("\n1Ô∏è‚É£ Maz√°n√≠ __pycache__ slo≈æek a .pyc soubor≈Ø...")
    removed_files = find_and_remove_pycache()
    
    if removed_files == 0:
        print("‚ÑπÔ∏è  ≈Ω√°dn√© cache soubory nenalezeny")
    else:
        print(f"üóëÔ∏è  Smaz√°no {removed_files} cache soubor≈Ø/slo≈æek")
    
    # 2. Vyƒçi≈°tƒõn√≠ import cache
    print("\n2Ô∏è‚É£ Maz√°n√≠ modul≈Ø z pamƒõti...")
    removed_modules = clear_import_cache()
    
    if removed_modules == 0:
        print("‚ÑπÔ∏è  ≈Ω√°dn√© moduly v pamƒõti nenalezeny")
    else:
        print(f"üóëÔ∏è  Smaz√°no {removed_modules} modul≈Ø z pamƒõti")
    
    # 3. Kontrola struktury
    check_directory_structure()
    
    print("\n‚ú® Cache byla vyƒçi≈°tƒõna!")
    print("\nüìã Doporuƒçen√© dal≈°√≠ kroky:")
    print("1. Ujistƒõte se, ≈æe slo≈æka 'game_object' (bez 's') neexistuje")
    print("2. Zkontrolujte, ≈æe m√°te slo≈æku 'game_objects' (s 's')")
    print("3. Restartujte Python interpreter / VS Code")
    print("4. Spus≈•te main.py znovu")

if __name__ == "__main__":
    main()